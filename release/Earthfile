FROM alpine:3.13

RUN apk add --update --no-cache \
    curl

all:
    LOCALLY
    ARG RELEASE_TAG
    ARG GITHUB_USER=alexcb
    ARG EARTHLY_REPO=earthly
    ARG BREW_REPO=homebrew-earthly-1
    RUN test -n "$RELEASE_TAG"

    # terrible unsafe hack to determine --push flag
    IF ps auxw | grep -v grep | grep earthly | grep -e --push
        ARG PUSH="--push"
    ELSE
        ARG PUSH=""
    END

    RUN set -e; \
        earthly_pid=$(ps axw | grep -v grep | grep earthly | grep 'all' | awk '{print $1}'); \
        expected_hash=$(cat ~/.earthly/earthly-prerelease | md5sum); \
        actual_hash=$(cat /proc/$earthly_pid/exe | md5sum); \
        if [ "$expected_hash" != "$actual_hash" ]; then \
          echo "\nERROR: +all requires the ./earthly script be used (rather than directly using any earthly binary).\n"; \
          exit 1; \
        fi;

	# THIS IS WORKING NOW
    RUN ../earthly $PUSH --build-arg GITHUB_USER="$GITHUB_USER" --build-arg EARTHLY_REPO="$EARTHLY_REPO" --build-arg BREW_REPO="$BREW_REPO" --build-arg RELEASE_TAG="$RELEASE_TAG" +release-github
    RUN ../earthly $PUSH --build-arg GITHUB_USER="$GITHUB_USER" --build-arg EARTHLY_REPO="$EARTHLY_REPO" --build-arg BREW_REPO="$BREW_REPO" --build-arg RELEASE_TAG="$RELEASE_TAG" +release-homebrew

    #RUN ../earthly --build-arg GITHUB_USER="$GITHUB_USER" --build-arg RELEASE_TAG="$RELEASE_TAG" +release-dockerhub
    #RUN ../earthly --build-arg GITHUB_USER="$GITHUB_USER" --build-arg RELEASE_TAG="$RELEASE_TAG" +release-homebrew
    #RUN ../earthly --build-arg GITHUB_USER="$GITHUB_USER" --build-arg RELEASE_TAG="$RELEASE_TAG" +release-repo

release:
    ARG RELEASE_TAG
    RUN test -n "$RELEASE_TAG"
    BUILD --build-arg RELEASE_TAG="$RELEASE_TAG" +release-dockerhub
    BUILD --build-arg RELEASE_TAG="$RELEASE_TAG" +release-github

release-dockerhub:
    ARG RELEASE_TAG
    RUN test -n "$RELEASE_TAG"
    BUILD \
        --build-arg DIND_ALPINE_TAG=alpine \
        --build-arg DIND_UBUNTU_TAG=ubuntu \
        ../+all-dind
    BUILD \
        --platform=linux/amd64 \
        --platform=linux/arm64 \
        --build-arg DIND_ALPINE_TAG=latest \
        ../+dind-alpine
    BUILD --build-arg TAG="$RELEASE_TAG" ../+earthly-docker
    BUILD \
        --platform=linux/amd64 \
        --platform=linux/arm/v7 \
        --platform=linux/arm64 \
        --build-arg TAG="$RELEASE_TAG" \
        ../buildkitd+buildkitd
    BUILD --build-arg TAG=latest ../+earthly-docker
    BUILD \
        --platform=linux/amd64 \
        --platform=linux/arm/v7 \
        --platform=linux/arm64 \
        --build-arg TAG=latest \
        ../buildkitd+buildkitd

release-github:
    FROM node:13.10.1-alpine3.11
    RUN apk add file curl jq git
    RUN apk add --update --no-cache --repository=http://dl-cdn.alpinelinux.org/alpine/edge/testing hub
    RUN npm install -g github-release-cli@v1.3.1
    WORKDIR /earthly
    ARG RELEASE_TAG
    ARG GITHUB_USER="earthly"
    ARG EARTHLY_REPO="earthly"
    ARG EARTHLY_GIT_HASH
    RUN test -n "$RELEASE_TAG" && test -n "$EARTHLY_GIT_HASH"
    COPY --build-arg VERSION=$RELEASE_TAG \
        ../+earthly-all/* ./release/
    RUN ls ./release
    RUN test -f ./release/earthly-linux-amd64 && \
        test -f ./release/earthly-darwin-amd64 && \
        test -f ./release/earthly-darwin-arm64 && \
        test -f ./release/earthly-linux-arm7 && \
        test -f ./release/earthly-linux-arm64 && \
        test -f ./release/earthly-windows-amd64.exe
    RUN file ./release/earthly-linux-amd64 | grep "x86-64"
    RUN file ./release/earthly-linux-amd64 | grep "ELF 64-bit"
    RUN file ./release/earthly-darwin-amd64 | grep "Mach-O 64-bit x86_64"
    RUN file ./release/earthly-darwin-arm64 | grep "Mach-O 64-bit arm64"
    RUN file ./release/earthly-linux-arm7 | grep "ARM, EABI5 version 1"
    RUN file ./release/earthly-linux-arm7 | grep "ELF 32-bit"
    RUN file ./release/earthly-linux-arm64 | grep "aarch64"
    RUN file ./release/earthly-linux-arm64 | grep "ELF 64-bit"
    RUN file ./release/earthly-windows-amd64.exe | grep "PE32"
    ARG BODY="No details provided"
    ARG SECRET_PATH="+secrets/user/610f09a9-4493-4d3c-bb00-b8e0cf36f1e0"
    #+secrets/earthly-technologies/github/griswoldthecat/token
    RUN --secret GITHUB_TOKEN="$SECRET_PATH" test -n "$GITHUB_TOKEN" && echo $GITHUB_TOKEN
    RUN --push \
        --secret GITHUB_TOKEN="$SECRET_PATH" \
        set -e; \
        # test github token works
        curl -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/user" | jq .login | grep "$GITHUB_USER"; \
        # first delete any previously released files (needed in case the previous upload attempt failed)
        PREV_RELEASE_ID=$(curl -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$GITHUB_USER/$EARTHLY_REPO/releases/tags/$RELEASE_TAG" | jq .id); \
        if [ -n "$PREV_RELEASE_ID" ] && [ "$PREV_RELEASE_ID" != "null" ]; then \
          echo "deleting previous release ID $PREV_RELEASE_ID"; \
          curl -H "Authorization: token $GITHUB_TOKEN" --request DELETE "https://api.github.com/repos/$GITHUB_USER/$EARTHLY_REPO/releases/$PREV_RELEASE_ID"; \
        fi; \
        # next make sure any previous tag is deleted (otherwise github will create an untagged release name vX.Y.Z)
        curl -H "Authorization: token $GITHUB_TOKEN" --request DELETE "https://api.github.com/repos/$GITHUB_USER/$EARTHLY_REPO/git/refs/tags/$RELEASE_TAG"; \
        # next, upload binaries
        github-release upload \
        --owner "$GITHUB_USER" \
        --repo "$EARTHLY_REPO" \
        --prerelease true \
        --commitish "$EARTHLY_GIT_HASH" \
        --tag "$RELEASE_TAG" \
        --name "$RELEASE_TAG" \
        --body "$BODY" \
        ./release/* 2>&1 | tee /tmp/release.log && \
        if grep -i "already_exists" /tmp/release.log > /dev/null; then \
          echo "ERROR: github-release upload failed: file already exists -- you must delete if from github before proceeding" && exit 1; \
        fi; \
        if grep -i error /tmp/release.log > /dev/null; then \
          echo "ERROR: github-release upload failed: check the above release.log output" && exit 1; \
        fi


release-homebrew:
    RUN apk add --update --no-cache \
        bash \
        bash-completion \
        binutils \
        ca-certificates \
        coreutils \
        curl \
        findutils \
        g++ \
        git \
        grep \
        less \
        make \
        openssl \
        openssh \
        util-linux
    RUN apk add --update --no-cache --repository=http://dl-cdn.alpinelinux.org/alpine/edge/testing hub
    
    # Deps and preconditions.
    ARG RELEASE_TAG
    ARG GIT_USERNAME="griswoldthecat"
    ARG GIT_NAME="griswoldthecat"
    ARG GIT_EMAIL="griswoldthecat@users.noreply.github.com"
    ARG GITHUB_USER
    ARG BREW_REPO
    ARG EARTHLY_REPO
    ARG GITHUB_TOKEN_SECRET_PATH="+secrets/user/610f09a9-4493-4d3c-bb00-b8e0cf36f1e0"
    ARG HOMEBREW_EARTHLY_URL="https://github.com/$GITHUB_USER/$BREW_REPO"
    RUN test -n "$RELEASE_TAG" && \
        test -n "$GIT_USERNAME" && \
        test -n "$GIT_NAME" && \
        test -n "$GIT_EMAIL" && \
        test -n "$HOMEBREW_EARTHLY_URL"
    ARG NEW_URL=https://github.com/"$GITHUB_USER"/"$EARTHLY_REPO"/archive/"$RELEASE_TAG".tar.gz
    RUN test -n "$NEW_URL"
    #GIT CLONE --branch main "$HOMEBREW_EARTHLY_URL" /earthly/homebrew-earthly
    WORKDIR /earthly/homebrew-earthly

    RUN git config --global user.name "$GIT_NAME" && \
        git config --global user.email "$GIT_EMAIL"

    COPY ./envcredhelper.sh /usr/bin/envcredhelper.sh
    RUN git config --global credential.helper "/bin/sh /usr/bin/envcredhelper.sh"

    RUN --secret GIT_PASSWORD="$GITHUB_TOKEN_SECRET_PATH" --no-cache \
        git clone "https://$GITHUB_USER@github.com/$GITHUB_USER/$BREW_REPO.git" .

    ARG RELEASE_BRANCH="release-$RELEASE_TAG"
    RUN git switch -c "$RELEASE_BRANCH"

    # Git setup.
    # Force use of https.
    #RUN git remote set-url origin "$HOMEBREW_EARTHLY_URL" && \
    #    git remote -v
    #RUN --secret GIT_PASSWORD="$GITHUB_TOKEN_SECRET_PATH" \
    #    git fetch --unshallow origin main
    #RUN git branch -f main && \
    #    git checkout main && \
    #    git branch -u origin/main
    #RUN git config --global user.name "$GIT_NAME" && \
    #    git config --global user.email "$GIT_EMAIL"

    # Make the change in a new branch.
    #RUN git checkout -b "release-$RELEASE_TAG"
    RUN mkdir -p /params
    RUN curl -L "$NEW_URL" | sha256sum | cut -f 1 -d ' ' > /params/downloadsha256
    COPY --build-arg VERSION=$RELEASE_TAG \
        ../+earthly-darwin-amd64/tags ../+earthly-darwin-amd64/ldflags /params/

    # Split /params/ldflags over two lines (to satisfy ruby linter).
    #RUN split --numeric-suffixes=1 --suffix-length=1 --bytes=80 /params/ldflags /params/ldflags && \
    #    touch /params/ldflags2 && \
    #    if [ -f "/params/ldflags3" ]; then \
    #        echo "More than two lines for ldflags not supported" && \
    #        exit 1 ;\
    #    fi

    # replace version with #{version} variable to conform to homebrew PR requests
    RUN escapedversion=`echo "${RELEASE_TAG}" | sed 's/\./\\\./g'`; \
        sed -i -e "s/${escapedversion}/v#{version}/g" /params/ldflags*

    RUN sed -i \
        -e 's^\burl ".*"^url "'"$NEW_URL"'"^' \
        -e 's^\bsha256 ".*"$^sha256 "'$(cat /params/downloadsha256)'"^' \
        -e 's^\btags = ".*"^tags = "'"$(cat /params/tags)"'"^' \
        -e 's^\bldflags = ".*"^ldflags = "'"$(cat /params/ldflags)"'"^' \
        ./Formula/earthly.rb
    RUN echo "Diff:" && git diff
    RUN version=${RELEASE_TAG#v} ;\
        echo version=$version ;\
        git commit -a -m "earthly $version"
    RUN --secret GIT_PASSWORD="$GITHUB_TOKEN_SECRET_PATH" \
        --push git push --force --set-upstream origin "$RELEASE_BRANCH"
    # Fork, push branch to fork and create upstream PR.
    #RUN --secret GITHUB_TOKEN="$GITHUB_TOKEN_SECRET_PATH" test -n "$GITHUB_TOKEN"
    #RUN --push \
    #    --secret GITHUB_TOKEN="$GITHUB_TOKEN_SECRET_PATH" \
    #    -- \
    #    hub fork
    #
    # this is returning:
    # Error creating fork: alexcb/homebrew-earthly-1 already exists on github.com

    # Force use of https so we can use GITHUB_TOKEN via envcredhelper.sh.
    #RUN --push \
    #    -- \
    #    git remote set-url "$GIT_USERNAME" "https://github.com/$GIT_USERNAME/$BREW_REPO.git" && \
    #    git remote -v
    #RUN --push \
    #    --secret GIT_PASSWORD="$GITHUB_TOKEN_SECRET_PATH" \
    #    -- \
    #    git push "$GIT_USERNAME" "release-$RELEASE_TAG"
    #RUN --push \
    #    --secret GIT_PASSWORD="$GITHUB_TOKEN_SECRET_PATH" \
    #    --secret GITHUB_TOKEN="$GITHUB_TOKEN_SECRET_PATH" \
    #    --secret SLACK_WEBHOOK_URL=+secrets/earthly-technologies/slack/release-webhook \
    #    -- \
    #    version=${RELEASE_TAG#v} ;\
    #    echo version=$version ;\
    #    output=$(hub pull-request --no-edit \
    #        -h "$GIT_USERNAME":"release-$RELEASE_TAG" \
    #        -m "earthly $version" \
    #        -m '-------------' \
    #        -m '#### Debug data' \
    #        -m 'PR generated by the [Earthly build](https://github.com/$GITHUB_USER/$EARTHLY_REPO/blob/main/release/Earthfile) (target +release-homebrew)' \
    #        -m '* `RELEASE_TAG='"$RELEASE_TAG"'`' \
    #        -m '* `GIT_USERNAME='"$GIT_USERNAME"'`' \
    #        -m '* `NEW_URL='"$NEW_URL"'`' \
    #        -m '* `NEW_SHA256='"$(cat /params/downloadsha256)"'`' \
    #        -m '* `TAGS='"$(cat /params/tags)"'`' \
    #        -m '* `LDFLAGS='"$(cat /params/ldflags)"'`' \
    #        ) && \
    #    echo $output && \
    #    echo curl -X POST -H 'Content-type: application/json' --data '{"text":"Successfully released `'$RELEASE_TAG'`: https://github.com/$GITHUB_USER/$EARTHLY_REPO/releases/tag/'$RELEASE_TAG'"}' $SLACK_WEBHOOK_URL && \
    #    echo curl -X POST -H 'Content-type: application/json' --data '{"text":"Successfully released homebrew PR for `'$RELEASE_TAG'`: '"$output"'"}' $SLACK_WEBHOOK_URL

release-vscode-syntax-highlighting:
    ARG VSCODE_RELEASE_TAG
    BUILD --build-arg VSCODE_RELEASE_TAG="$VSCODE_RELEASE_TAG" ../contrib/earthfile-syntax-highlighting+release

release-repo:
    ARG RELEASE_TAG
    RUN test -n "$RELEASE_TAG"
    BUILD --build-arg RELEASE_TAG="$RELEASE_TAG" ./apt-repo+build-and-release
    BUILD --build-arg RELEASE_TAG="$RELEASE_TAG" ./yum-repo+build-and-release
